#!/usr/bin/env python
"""List lemmy communities.

List lemmy communities for an instance, or login to view your subscriptions.
"""
import argparse
import getpass
import os
import requests
import sys

def get_parser():
    parser = argparse.ArgumentParser(
        description=__doc__.split("\n")[-2]
    )
    parser.add_argument("instance", help="Lemmy instance URL")
    parser.add_argument("username", help="Username", nargs="?")
    return parser

def login(instance, username):
    login_url = (instance + "/api/v3/user/login").replace("//", "/").replace(":/", "://")
    session = requests.Session()
    password = os.getenv("LEMMY_PASS", getpass.getpass("Enter your password: "))
    login_payload = {
        "username_or_email": username,
        "password": password
    }
    response = session.post(login_url, json=login_payload)

    if response.status_code == 200:
        access_token = response.json()["jwt"]
        session.access_token = access_token
        session.headers.update({"Authorization": f"Bearer {access_token}"})
        return session
    else:
        print("Login failed")
        sys.exit(1)

def subscriptions(session, instance):
    subscriptions = []
    for i in range(1, 100):
        query=f"community/list?page={i}&limit=50&sort=TopYear"
        if hasattr(session, "access_token"):
            query += f"&auth={session.access_token}&type_=Subscribed"
        else:
            query += "&type_=Local"
        url = f"{instance}/api/v3/{query}".replace("//", "/").replace(":/", "://")
        response = session.get(url)
        if response.status_code == 200:
            data = response.json()
            communities = [
                    community.get("community", {}).get("actor_id", "")
                    for community
                    in data.get("communities", [])
            ]
            subscriptions.extend(communities)
            if not communities:
                break
    return sorted(list(set(subscriptions)), key=lambda s: s.split("/")[-1])


def main():
    args = get_parser().parse_args()
    instance = args.instance
    if not instance.startswith("http"):
        instance = "https://" + instance
    if args.username:
        session = login(instance, args.username)
    else:
        session = requests.Session()
    print("\n".join(subscriptions(session, instance)))



if __name__ == "__main__":
    main()

